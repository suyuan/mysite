Lua语法拾遗



函数具有和变量同样的地位，可以作为值传递

有 GC

分号可省略

支持多重赋值，可以无需借助临时变量实现变量值的交换

不支持复合运算符，如 +=、-= 等都是非法的

支持 if-elseif-else、for、for in、while、repeat until [相当于其他语言的 do while]

不支持 switch 和 continue

删除数据只需将其赋值为 nil 即可

Lua 中，只有 nil 和 false 视为假

字符串不可变

使用 .. 连接字符串

使用 # 作为取长度操作符 [取 Table 的正确大小，需要使用 table.maxn 函数]

Table 是对象，等同于其他语言中的关联数组或哈希表，使用 {} 语法构造 [类似于 JavaScript]

Table 永远是匿名的，持有 Table 的变量和 Table 本身没有固定的关联性

数组习惯于以 1 为起始索引 [数组的本质是 Table，Table 是 Lua 中唯一的数据结构]

取模运算符一个很有用的特性：x%1 取小数部分，x - x%1 取整数部分，x - x%0.01 取精确到小数点后两位的结果

相等性和不等性测试符分别为：== 和 ~=

只要两比较值具有不同的类型，Lua 就认为其是不相等的

只有两数值或两字符串才能进行大小性比较，其他类型只能做相等性和不等性测试

Lua 惯用法：a and b or c 相当于其他语言中的三元运算符 a ? b : c [前提是 b 不能为假]

变量默认为全局变量，局部变量使用 local 创建

Lua 惯用法：local var_name = var_name [将全局变量的值保存于局部变量]

对于函数调用，当只有一个参数，且该参数是一个字符串字面量或一个 Table 构造式时，括号可省略

冒号形式的调用会把调用者隐含地作为函数的第一个参数进行传递，所以 o.foo(o, x) 的等价写法为 o:foo(x)



2013-08-12 10:03
