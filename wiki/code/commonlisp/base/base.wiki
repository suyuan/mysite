%title 基础语法

[[../../../index|首页]] - [[../../index|Code]] - [[../index|CommonLisp]] - [[index|Base]]
==基础语法==
----
===特殊符号===

* `'`：操作符 `quote` 的别名，用以保护表达式不被求值，常用写法为 `'(+ 1 2)`
* `#'`：操作符 `function` 的别名，返回目标函数所对应的对象，如 `#'+`
* `t`：逻辑真
* `nil`：逻辑假
----
===数据类型===

* `符号`：一般需要要 `'` 进行引用，如 `'Ruchee`
* `列表`：用括号包裹的零个或多个元素，元素不限类型，可以通过调用 `list` 函数来构建，空列表可用 `()` 或 `nil` 来表示
----
===流程控制===

* `if`：`(if (测试条件) (满足执行) (不满足执行))`，第三个参数可选
* `do`：`(do (基准条件) 迭代体)`，其中基准条件中可以定义局部变量，基本格式为 `(变量名 初始值 每一次迭代后的值)`
* `dolist`：`(dolist (单个元素 整个列表) 迭代体)`
----
===函数===

基本形式：`(defun 函数名 (参数表列) 函数体)`

匿名函数：`(lambda (参数表列) 函数体)`
----
===工具函数===

* `progn`：接受任意数量的表达式，依序对它们求值，并返回最后一个表达式的值
* `apply`：接受一个函数对象和任意个参数，然后使用这些参数调用该函数，最后一个参数必须是列表
* `funcall`：与 `apply` 作用相同，但参数不能是列表，必须是一个个单个的值
* `cons`：创建列表，与 `list` 的区别在于，`cons` 创建的是点对表，而 `list` 创建的只是单纯的表
* `car`：返回列表的第一个元素
* `cdr`：返回列表除第一个元素以外的所有元素
* `copy-list`：拷贝一个列表，而不是默认的指针指向
* `append`：串接列表
* `nth`：取特定索引的元素
* `nthcdr`：取特定索引的 `cdr`
* `last`：返回最后一个元素
* `first - tenth`：取得特定索引的元素，从 `1` 开始索引，而不是 `0`
* `mapcar`：接受一个函数和任意个列表，返回在每个列表的每个元素上应用该函数的结果
* `maplist`：参数和 `mapcar` 一样，对列表的每一个渐进的 `cdr` 应用该函数
* `member`：在一个列表中寻找指定元素，返回该元素第一次匹配直到列表结束的所有内容，默认使用 `eql` 来比较，可使用 `:test` 关键字参数自定义比较函数
* `adjoin`：一个条件版的 `cons`，其接受一个对象和一个列表，只有该对象不存在于该列表，才将对象构建到列表里面
* `union`（并）、`intersection`（交）、`set-difference`（补）：三函数均接受两个列表，进行集合求并、求交、求补的操作
----
===判断函数===

* `null`：是否为空
* `atom`：是否是原子
* `listp`：是否是列表
* `consp`：是否是 `cons` 对象
* `zerop`：是否为 `0`
* `eql`：是否是相同的对象
* `equal`：是否拥有相同的值，比 `eql` 宽松
----
===编码惯例===

返回值为逻辑真或逻辑假的函数，通常函数名以 `p` 结尾

列表必须被引用，不然会被视作代码；符号必须被引用，不然会被视作变量

`nil` 既是原子，也是列表

全局变量名用 `*` 号包裹

数值有类型，变量无类型，`t` 是所有类型的基类，每个对象都属于 `t` 类型
----
<red>date</red> : 2013-04-23
----
